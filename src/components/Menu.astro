---
import { getCollection } from "astro:content";
import { siteLang, siteCurrency } from "~/data/config";

const plates = await getCollection("plates");
const siteLangFormat = siteLang.replace("_", "-");
---

<!-- Rounded Menu -->
<div class="mb-20 sticky top-8 z-10">
  <nav
    class="bg-white text-white rounded-full max-w-5xl mx-auto p-2 flex items-center justify-center gap-2 overflow-hidden"
  >
    {
      plates.map((plate) => (
        <button
          data-target={`#${plate.data.slug}`}
          class="px-4 py-2 rounded-full focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2" /* focus:ring-white works well with black buttons */
        >
          {plate.data.prettyName}
        </button>
      ))
    }
  </nav>
</div>

<div class="grid grid-cols-1 gap-y-32">
  {
    plates.map((plate) => (
      <div
        id={plate.data.slug}
        class="space-y-16 scroll-mt-20 transition-all duration-300 ease-in-out"
      >
        <div class="flex flex-col items-center gap-2 max-w-lg mx-auto text-balance text-center">
          <h3 class=" text-white font-bold custom-bg-light-brown px-4 py-2 rounded-xl shadow-md">
            {plate.data.prettyName}
          </h3>
          <p>{plate.data.description}</p>
        </div>
        <dl class="max-w-5xl mx-auto">
          <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 lg:gap-x-16 xl:gap-x-32">
            {plate.data.plates.map((item) => (
              <div>
                <dt>
                  <div class="flex justify-between items-center">
                    <span class="font-bold text-2xl tracking-wide">
                      {item.name}
                    </span>
                    <span class="font-medium text-lg">
                      {new Intl.NumberFormat(siteLangFormat, {
                        style: "currency",
                        currency: siteCurrency,
                      }).format(item.price)}
                    </span>
                  </div>
                </dt>
                <dd>
                  <p class="mt-2 text-gray-500 tracking-wide leading-normal text-balance">
                    {item.description}
                  </p>
                </dd>
              </div>
            ))}
          </div>
        </dl>
      </div>
    ))
  }
</div>

<script client:load>
  // Ensure the script runs immediately when the component is loaded
  const setupMenu = () => {
    // Add click event listeners to buttons
    const buttons = document.querySelectorAll("nav button");
    buttons.forEach((button) => {
      button.addEventListener("click", () => {
        const targetId = button.getAttribute("data-target");
        if (!targetId) return;

        const targetElement = document.querySelector(targetId);
        if (!targetElement) {
          console.error(`Target element not found for ID: ${targetId}`);
          return;
        }

        // Remove active state from all sections
        document.querySelectorAll(".space-y-16").forEach((section) => {
          section.classList.remove("active-section");
        });

        // Add active state to the clicked section
        targetElement.classList.add("active-section");

        // Calculate the scroll offset dynamically
        const menuHeight = document.querySelector("nav")?.offsetHeight || 0;
        const additionalPadding = 20; // Adjust as needed
        const offsetTop =
          targetElement.offsetTop - (menuHeight + additionalPadding);

        console.log("Scrolling to:", offsetTop);

        // Scroll to the adjusted position
        window.scrollTo({
          top: offsetTop,
          behavior: "smooth",
        });
      });
    });
  };

  // Initialize the menu setup
  setupMenu();
</script>

<style>
  /* Active section styling (Unchanged) */
  .active-section {
    margin-top: 4rem; /* Add spacing above the active section */
    padding-top: 2rem; /* Add padding for visual separation */
    border-top: 2px solid #d4a373; /* Optional: Add a decorative border */
  }

  /* Ensure prettyName is always visible (Unchanged) */
  h3.h3 {
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* Add subtle shadow for emphasis */
  }

  /* === MODIFIED BUTTON STYLING === */
  nav button {
    /* background: #f5f0e6; */ /* Old background */
    background-color: rgb(92, 92, 92); /* New: Black background */
    /* color: rgb(23, 14, 2); */ /* Old text color */
    color: white; /* New: White text */
    border: none;
    cursor: pointer;
    font-weight: bold;
    transition:
      transform 0.2s ease-in-out,
      background-color 0.2s ease-in-out;
    /* Padding and border-radius are handled by Tailwind classes `px-4 py-2 rounded-full` on the button element */
  }

  nav button:hover,
  nav button:focus {
    transform: scale(1.1); /* Keep zoom effect */
    /* background-color: #f8cf78; */ /* Old hover background */
    background-color: #333; /* New: Dark gray background on hover/focus */
    /* Text color remains white (inherited or explicitly set if needed) */
  }
  /* === END MODIFIED BUTTON STYLING === */

  /* Nav styling (Background kept white as per original code, but can be changed if needed) */
  nav {
    background-color: rgb(255, 255, 255);
    border-radius: 50px; /* Rounded corners */
    /* text-white class removed from nav element itself as buttons now handle their text color */
    /* Note: The `focus:ring-offset-2` on buttons will use this nav background color for the offset */
  }

  /* Responsive adjustments (Unchanged) */
  @media (max-width: 768px) {
    /* Button styles cascade, so only size/padding adjustments needed here */
    nav button {
      font-size: 0.875rem;
      padding: 0.5rem 1rem; /* Tailwind classes might override this, ensure consistency if needed */
    }

    nav {
      flex-wrap: wrap;
      gap: 1rem;
    }

    /* Ensure proper spacing for small screens */
    .active-section {
      margin-top: 6rem; /* Increase spacing for mobile */
    }

    /* Ensure prettyName is visible on smaller screens */
    h3.h3 {
      font-size: 1.25rem; /* Larger font size for better visibility */
      padding: 0.75rem 1rem; /* More padding for readability */
    }
  }
</style>