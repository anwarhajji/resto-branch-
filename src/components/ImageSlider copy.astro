---
// src/components/ImageSlider.astro
import { Picture } from "astro:assets";

// Define the expected properties for the component
export interface Props {
  /** An array of image objects, each with src (ImageMetadata) and alt text. */
  images: {
    src: ImageMetadata;
    alt: string;
  }[];
  /** Optional additional CSS classes for the main slider container. */
  class?: string;
  /** Optional Tailwind class string to override the default height of the slider. */
  imageHeightClass?: string;
}

// Destructure props with default values
const {
  images = [],
  class: className,
  imageHeightClass = "h-[400px] md:h-[500px] lg:h-[600px]", // Default responsive height
} = Astro.props;

// Generate a unique ID for each slider instance
const sliderId = `slider-${crypto.randomUUID()}`;

// Common attributes for the Astro Picture component for optimized images
const pictureAttributes = {
  widths: [400, 800, 1200, 1600, 2000],
  sizes: "100vw",
  formats: ["avif", "webp"] as const,
  loading: "lazy" as const,
  fetchpriority: "auto" as const,
};

// Attributes specific to the first image for LCP
const firstImageAttributes = {
  ...pictureAttributes,
  loading: "eager" as const,
  fetchpriority: "high" as const,
};

// Determine if slider controls are needed
const hasMultipleImages = images && images.length > 1;

// --- Server-side Log (Optional, keep if useful) ---
console.log(`[ImageSlider SSR] Rendering slider "${sliderId}" with ${images.length} images.`);
// --- End Server-side Log ---
---

{
  /* Only render the slider if there are images */
  images && images.length > 0 && (
    <div
      id={sliderId}
      class:list={[
        "image-slider relative overflow-hidden w-full bg-gray-200 dark:bg-gray-800", // Base styles
        imageHeightClass, // Apply dynamic height class
        className, // Allow consumers to add their own classes
      ]}
      data-total-slides={images.length}
      aria-roledescription="carousel"
      aria-label="Image Slider"
    >
      {/* Container for the sliding track */}
      <div
        class:list={[
          "slides-track flex h-full transition-transform duration-500 ease-in-out", // Flex layout, height, and CSS transition
        ]}
        # style="transform: translateX(0%);" /* JS handles initial transform now */
      >
        {/* Loop through images to create slides */}
        {images.map((imgData, index) => (
          <div
            class="slide flex-shrink-0 w-full h-full" // Each slide takes full width and doesn't shrink
            data-index={index}
            role="group"
            aria-roledescription="slide"
            aria-label={`Slide ${index + 1} of ${images.length}`}
            aria-hidden={index !== 0 ? "true" : "false"} /* Hide non-visible slides initially */
          >
            {/* Astro Picture component for optimized images */}
            <Picture
              src={imgData.src}
              alt={imgData.alt}
              class:list={["w-full h-full object-cover object-center block"]} // Image styling
              {...(index === 0 ? firstImageAttributes : pictureAttributes)}
            />
          </div>
        ))}
      </div>

      {/* Navigation Buttons - Conditionally rendered */}
      {hasMultipleImages && (
        <>
          <button
            type="button"
            class="prev-button absolute top-1/2 left-2 md:left-4 transform -translate-y-1/2 z-10 bg-black/40 text-white p-2 rounded-full hover:bg-black/60 focus:outline-none focus-visible:ring-2 focus-visible:ring-white focus-visible:ring-opacity-75 cursor-pointer transition-colors duration-150 disabled:opacity-50 disabled:cursor-not-allowed"
            aria-label="Previous Slide"
            aria-controls={sliderId}
          >
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2.5" stroke="currentColor" class="w-5 h-5 md:w-6 md:h-6 pointer-events-none">
              <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 19.5 8.25 12l7.5-7.5"/>
            </svg>
          </button>
          <button
            type="button"
            class="next-button absolute top-1/2 right-2 md:right-4 transform -translate-y-1/2 z-10 bg-black/40 text-white p-2 rounded-full hover:bg-black/60 focus:outline-none focus-visible:ring-2 focus-visible:ring-white focus-visible:ring-opacity-75 cursor-pointer transition-colors duration-150 disabled:opacity-50 disabled:cursor-not-allowed"
            aria-label="Next Slide"
            aria-controls={sliderId}
          >
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2.5" stroke="currentColor" class="w-5 h-5 md:w-6 md:h-6 pointer-events-none">
              <path stroke-linecap="round" stroke-linejoin="round" d="m8.25 4.5 7.5 7.5-7.5 7.5"/>
            </svg>
          </button>
        </>
      )}

      {/* Navigation Dots - Conditionally rendered */}
      {hasMultipleImages && (
        <div
          class="dots-navigation absolute bottom-4 left-1/2 transform -translate-x-1/2 z-10 flex space-x-2"
          role="tablist"
          aria-label="Slides Navigation"
        >
          {images.map((_, index) => (
            <button
              type="button"
              class:list={[
                "dot w-2.5 h-2.5 rounded-full transition-all duration-150",
                "focus:outline-none focus-visible:ring-1 focus-visible:ring-white focus-visible:ring-offset-1 focus-visible:ring-offset-black/50",
                "cursor-pointer",
                 index === 0 ? "bg-white/100 scale-125" : "bg-white/50 scale-100 hover:bg-white/75", // Initial active/inactive styles
              ]}
              data-slide-to={index}
              aria-label={`Go to slide ${index + 1}`}
              aria-selected={index === 0 ? "true" : "false"}
              aria-controls={sliderId}
              role="tab"
              tabindex={index === 0 ? "0" : "-1"}
            />
          ))}
        </div>
      )}
    </div>
  )
}

{/* Client-side JavaScript with minimal essential logs */}
<script define:vars={{ sliderId }}>
  function initializeSlider(id) {
    const slider = document.getElementById(id);
    if (!slider) return; // Basic check

    const track = slider.querySelector(".slides-track");
    const slides = slider.querySelectorAll(".slide");
    const prevButton = slider.querySelector(".prev-button");
    const nextButton = slider.querySelector(".next-button");
    const dotsContainer = slider.querySelector(".dots-navigation");
    const dots = slider.querySelectorAll(".dot");
    const totalSlides = parseInt(slider.dataset.totalSlides, 10);

    // Basic validation: If no track/slides or only one slide, disable controls and exit
    if (!track || slides.length === 0 || totalSlides <= 1) {
        if (prevButton) prevButton.style.display = 'none';
        if (nextButton) nextButton.style.display = 'none';
        if (dotsContainer) dotsContainer.style.display = 'none';
        // Ensure first/only slide is accessible
        if(slides.length > 0) {
             slides[0].setAttribute("aria-hidden", "false");
             slides[0].inert = false;
        }
        return;
    }

    let currentIndex = 0;
    let isTransitioning = false;
    let touchStartX = 0;
    let touchEndX = 0;
    const transitionDuration = 500; // Match CSS transition duration

    // Function to update the slider's visual state and accessibility attributes
    function updateSlider(focusIndex = -1) {
      if (isTransitioning) return;

      const transformValue = `translateX(-${currentIndex * 100}%)`;
      // --- LOG: Check if transform style is calculated correctly ---
      console.log(`%c SLIDER UPDATE [${id}]: Setting transform to: ${transformValue} for index ${currentIndex}`, 'color: purple; font-weight: bold;');
      track.style.transform = transformValue;

      // Update dot indicators
      dots.forEach((dot, index) => {
        const isActive = index === currentIndex;
        dot.classList.toggle("bg-white/100", isActive);
        dot.classList.toggle("scale-125", isActive);
        dot.classList.toggle("bg-white/50", !isActive);
        dot.classList.toggle("hover:bg-white/75", !isActive);
        dot.classList.toggle("scale-100", !isActive);
        dot.setAttribute("aria-selected", isActive ? "true" : "false");
        dot.setAttribute("tabindex", isActive ? "0" : "-1");
        if (focusIndex === index && document.activeElement !== dot) {
          dot.focus();
        }
      });

      // Update slide accessibility
      slides.forEach((slide, index) => {
        const isCurrent = index === currentIndex;
        slide.setAttribute("aria-hidden", isCurrent ? "false" : "true");
        slide.inert = !isCurrent;
      });

      // Prevent interaction during transition
      isTransitioning = true;
      setTimeout(() => {
        isTransitioning = false;
      }, transitionDuration);
    }

    // Function to navigate to a specific slide index
    function goToSlide(index, focusDot = false) {
      const newIndex = Math.max(0, Math.min(index, totalSlides - 1));
      if (newIndex !== currentIndex && !isTransitioning) {
        currentIndex = newIndex;
        updateSlider(focusDot ? currentIndex : -1);
      }
    }

    // Navigate to the next slide (with wrap-around)
    function showNext() {
       if (isTransitioning) return;
       currentIndex = (currentIndex + 1) % totalSlides;
       updateSlider();
    }

    // Navigate to the previous slide (with wrap-around)
    function showPrev() {
       if (isTransitioning) return;
       currentIndex = (currentIndex - 1 + totalSlides) % totalSlides;
       updateSlider();
    }

    // --- Event Listeners ---

    if (nextButton) {
        nextButton.addEventListener("click", (e) => {
             // --- LOG: Check if click event is firing ---
            console.log(`%c EVENT [${id}]: Next button clicked!`, 'color: green; font-weight: bold;', e.target);
            showNext();
        });
    }

    if (prevButton) {
        prevButton.addEventListener("click", (e) => {
            // --- LOG: Check if click event is firing ---
            console.log(`%c EVENT [${id}]: Prev button clicked!`, 'color: green; font-weight: bold;', e.target);
            showPrev();
        });
    }

    if (dots.length > 0) {
        dots.forEach((dot) => {
            dot.addEventListener("click", (e) => {
                if (isTransitioning) return;
                const targetButton = e.currentTarget;
                const index = parseInt(targetButton.dataset.slideTo, 10);
                if (!isNaN(index)) {
                    // --- LOG: Check if click event is firing ---
                    console.log(`%c EVENT [${id}]: Dot ${index} clicked!`, 'color: green; font-weight: bold;', targetButton);
                    goToSlide(index, true);
                }
            });
        });
    }

    // Keyboard navigation
    slider.addEventListener("keydown", (e) => {
      if (isTransitioning) return;
      let handled = false;
      if (e.target.classList.contains('dot') && e.target.closest(".dots-navigation")) {
        let targetIndex = currentIndex;
        if (e.key === "ArrowRight") targetIndex = (currentIndex + 1) % totalSlides;
        else if (e.key === "ArrowLeft") targetIndex = (currentIndex - 1 + totalSlides) % totalSlides;
        else if (e.key === "Home") targetIndex = 0;
        else if (e.key === "End") targetIndex = totalSlides - 1;
        else return; // Don't handle other keys on dots

        handled = true;
        if (targetIndex !== currentIndex) {
           e.preventDefault();
           goToSlide(targetIndex, true);
        }
      }
      else if (e.target === slider || e.target === prevButton || e.target === nextButton) {
        if (e.key === "ArrowRight") {
          handled = true; e.preventDefault(); showNext(); if(nextButton) nextButton.focus();
        } else if (e.key === "ArrowLeft") {
          handled = true; e.preventDefault(); showPrev(); if(prevButton) prevButton.focus();
        }
      }
    });

    // Touch swipe navigation
    track.addEventListener( "touchstart", (e) => {
        if (isTransitioning) return;
        touchStartX = e.changedTouches[0].screenX;
      }, { passive: true } );

    track.addEventListener( "touchend", (e) => {
        if (isTransitioning) return;
        touchEndX = e.changedTouches[0].screenX;
        handleSwipe();
      }, { passive: true } );

    function handleSwipe() {
      const threshold = 50;
      if (touchStartX === 0 || touchEndX === 0) return; // Avoid clicks/taps
      const deltaX = touchEndX - touchStartX;

      if (deltaX < -threshold) showNext(); // Swiped Left
      else if (deltaX > threshold) showPrev(); // Swiped Right

      touchStartX = 0; touchEndX = 0; // Reset
    }

    // --- Initialization ---
    updateSlider(); // Set the initial state
  }

  // --- Script Loading & Execution ---
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", () => initializeSlider(sliderId));
  } else {
    setTimeout(() => initializeSlider(sliderId), 0); // Use timeout for safety
  }
</script>